{"version":3,"file":"account_setup.min.js","sources":["../src/account_setup.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This plugin provides access to Moodle data in form of analytics and reports in real time.\n *\n *\n * @package    local_intelliboard\n * @copyright  2019 IntelliBoard, Inc\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @website    https://www.intelliboard.net/\n */\n\n\ndefine(['jquery', 'core/ajax', 'core/log'], function($, ajax, log) {\n\n    const ASValidator = {\n        required: (input) => {\n            return input.value.length > 0;\n        },\n        email: (input) => {\n            let pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n            return pattern.test(input.value);\n        },\n        tel: (input) => {\n            let pattern = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\\s\\./0-9]*$/;\n            return pattern.test(input.value);\n        },\n        validate: (input) => {\n            if (input.required) {\n                if (typeof ASValidator[input.type] === \"function\") {\n                    return ASValidator[input.type](input)\n                } else {\n                    return ASValidator.required(input);\n                }\n            }\n        }\n    }\n\n    const AccountSetup = {\n        forms: [\"getstartedform\", \"accountform\", \"accounttypeform\", \"usertypeform\"],\n\n        validator: ASValidator,\n        usertype: [],\n\n        init: (setup) => {\n            if (setup == true) {\n                AccountSetup.forms = [\"getstartedform\", \"thanksform\"];\n            } else {\n                AccountSetup.initFormValidation(\"accountform\");\n                AccountSetup.initFormValidation(\"accounttypeform\");\n                AccountSetup.initAccountTypeSelection();\n                AccountSetup.initUserTypeSelection();\n                AccountSetup.setupSubmitAction();\n            }\n            AccountSetup.initNextAction();\n            AccountSetup.initPrevAction();\n        },\n        getPrevForm: (currentForm) => {\n            let pos = AccountSetup.forms.indexOf(currentForm);\n            let prevForm = AccountSetup.forms[pos - 1];\n            return prevForm.length ? prevForm : false;\n        },\n        getNextForm: (currentForm) => {\n            let pos = AccountSetup.forms.indexOf(currentForm);\n            let nextForm = AccountSetup.forms[pos + 1];\n            return nextForm.length ? nextForm : false;\n\n        },\n        toggleForms: (showForm, hideForm) => {\n            document.getElementById(hideForm).classList.add(\"intelliboard-hide\");\n            document.getElementById(showForm).classList.remove(\"intelliboard-hide\");\n        },\n        getFormInputs: (formId) => {\n            let form = document.getElementById(formId);\n            return form.querySelectorAll('input, select');\n        },\n        setValidationState: (input, valid) => {\n            if (valid) {\n                input.classList.remove('is-invalid');\n                input.classList.add('is-valid');\n            } else {\n                input.classList.remove('is-valid');\n                input.classList.add('is-invalid');\n            }\n        },\n        initValidationAction: (inputs) => {\n            inputs.forEach((input) => {\n                if (input.required) {\n                    let event = 'input';\n                    if (input.type === 'select') {\n                        event = 'change';\n                    }\n                    input.addEventListener(event, function () {\n                            AccountSetup.setValidationState(input, AccountSetup.validator.validate(input));\n                    });\n                }\n            });\n        },\n        setHelpTextState: (formId, visible) => {\n            let helptext = document.getElementById(formId).getElementsByClassName('form-help-text')[0];\n            if (helptext) {\n                if (visible) {\n                    helptext.classList.replace('invisible', 'visible');\n                } else {\n                    helptext.classList.replace('visible', 'invisible');\n                }\n            }\n        },\n        setNextButtonState: (formId, disabled) => {\n            let nextbutton = document.getElementById(formId).getElementsByClassName('next-btn')[0];\n            if (nextbutton) {\n                nextbutton.disabled = disabled;\n                AccountSetup.setHelpTextState(formId, disabled);\n            }\n        },\n\n        isFormValid: (formId) => {\n            let formInputs = AccountSetup.getFormInputs(formId);\n            for (let i = 0; i < formInputs.length; i++)  {\n                if (formInputs[i].required && !AccountSetup.validator.validate(formInputs[i])) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        initFormValidation: (formId) => {\n            let formInputs = AccountSetup.getFormInputs(formId);\n            AccountSetup.initValidationAction(formInputs);\n            for (let i = 0; i < formInputs.length; i++)  {\n                let event = 'input';\n                if (formInputs[i].type === 'select') {\n                    event = 'change';\n                }\n                formInputs[i].addEventListener(event, function () {\n                    AccountSetup.setNextButtonState(formId, !AccountSetup.isFormValid(formId));\n                });\n            }\n        },\n        initNextAction: () => {\n            Array.from(document.getElementsByClassName(\"next-btn\")).forEach((button) => {\n                    button.addEventListener('click', function () {\n                        let currentform = this.getAttribute('data-form');\n                        let nextform = AccountSetup.getNextForm(currentform);\n                        AccountSetup.toggleForms(nextform, currentform);\n                        let inputs = AccountSetup.getFormInputs(nextform);\n                        if (inputs[0]) {\n                            inputs[0].dispatchEvent(new Event(\"input\"));\n                        }\n                        return false;\n                    }, false);\n            });\n\n        },\n        initPrevAction: () => {\n            Array.from(document.getElementsByClassName(\"prev-btn\")).forEach((button) => {\n                button.addEventListener('click', function() {\n                    let currentform = this.getAttribute('data-form');\n                    let prevform = AccountSetup.getPrevForm(currentform);\n                    AccountSetup.toggleForms(prevform, currentform);\n                    return false;\n                }, false);\n            });\n        },\n        initAccountTypeSelection: () => {\n            let accounttypes = document.getElementsByClassName(\"accounttype\");\n            for (var i = 0; i < accounttypes.length; i++) {\n                accounttypes[i].addEventListener('click', function() {\n                    Array.from(accounttypes).forEach((element) => {\n                        element.classList.remove('active');\n                        element.setAttribute('aria-pressed', 'false');\n                    });\n                    this.classList.add('active');\n                    this.setAttribute('aria-pressed', 'true');\n                    let accounttype = this.getAttribute('data-accounttype');\n                    let input = document.getElementById('accounttype');\n                    if (input.value != accounttype) {\n                        AccountSetup.setupUserTypeForm(accounttype);\n                    }\n                    input.value = accounttype;\n                    input.dispatchEvent(new Event(\"input\"));\n                    return false;\n                }, false);\n            }\n        },\n        setupUserTypeForm: (accounttype) => {\n                AccountSetup.usertype = [];\n                Array.from(document.getElementsByClassName(\"usertype\")).forEach((ut) => {\n                    ut.classList.remove('active');\n                    ut.setAttribute('aria-pressed', 'false');\n                });\n                document.getElementById('submitdata').disabled = true;\n                Array.from(document.getElementsByClassName('intelliboard-user-types')).forEach((form) => {\n                    if (form.id === accounttype) {\n                        form.classList.remove(\"intelliboard-hide\");\n                    } else {\n                        form.classList.add(\"intelliboard-hide\");\n                    }\n                });\n        },\n        initUserTypeSelection: () => {\n            let usertypes = document.getElementsByClassName(\"usertype\");\n            for (var i = 0; i < usertypes.length; i++) {\n                usertypes[i].addEventListener('click', function() {\n                    let val = this.getAttribute('data-usertype');\n                    if (AccountSetup.usertype.indexOf(val) >= 0) {\n                        AccountSetup.usertype.splice(AccountSetup.usertype.indexOf(val), 1);\n                        this.classList.remove('active');\n                        this.setAttribute('aria-pressed', 'false');\n                    } else {\n                        AccountSetup.usertype.push(val);\n                        this.classList.add('active');\n                        this.setAttribute('aria-pressed', 'true');\n                    }\n                    let isFormValid = AccountSetup.usertype.length > 0;\n                    document.getElementById('submitdata').disabled = !isFormValid;\n                    AccountSetup.setHelpTextState('usertypeform', !isFormValid);\n                    return false;\n                }, false);\n            }\n        },\n        setupSubmitAction: () => {\n            let submit = document.getElementById('submitdata');\n            submit.addEventListener(\"click\", (event) => {\n                let forms = document.getElementsByClassName('intelliboard-splash-page');\n                let data = {};\n                data.usertype = AccountSetup.usertype.toString();\n                Array.from(forms).forEach( (form) => {\n                    form.querySelectorAll('input, select').forEach( (input) => {\n                        data[input.name] = input.value;\n                    });\n                    if (form.id === 'thanksform') {\n                        form.classList.remove(\"intelliboard-hide\");\n                    } else {\n                        form.classList.add(\"intelliboard-hide\");\n                    }\n                });\n                AccountSetup.sendData(data);\n            }, false);\n        },\n        sendData: (data) => {\n            ajax.call([{\n                methodname: 'local_intelliboard_account_setup',\n                args: {\n                    params: data\n                }\n            }]);\n        }\n    }\n\n    return AccountSetup;\n\n});"],"names":["define","$","ajax","log","ASValidator","required","input","value","length","email","test","tel","validate","type","AccountSetup","forms","validator","usertype","init","setup","initFormValidation","initAccountTypeSelection","initUserTypeSelection","setupSubmitAction","initNextAction","initPrevAction","getPrevForm","currentForm","pos","indexOf","prevForm","getNextForm","nextForm","toggleForms","showForm","hideForm","document","getElementById","classList","add","remove","getFormInputs","formId","querySelectorAll","setValidationState","valid","initValidationAction","inputs","forEach","event","addEventListener","setHelpTextState","visible","helptext","getElementsByClassName","replace","setNextButtonState","disabled","nextbutton","isFormValid","formInputs","i","Array","from","button","currentform","this","getAttribute","nextform","dispatchEvent","Event","prevform","accounttypes","element","setAttribute","accounttype","setupUserTypeForm","ut","form","id","usertypes","val","splice","push","data","toString","name","sendData","call","methodname","args","params"],"mappings":"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"}